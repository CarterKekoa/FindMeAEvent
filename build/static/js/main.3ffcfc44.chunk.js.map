{"version":3,"sources":["scroller.js","App.js","serviceWorker.js","index.js"],"names":["ScrollView","elements","register","name","ref","unregister","scrollTo","node","findDOMNode","scrollIntoView","time","align","top","scroll","this","React","Children","only","props","children","Component","childContextTypes","PropTypes","object","ScrollElement","context","_element","cloneElement","contextTypes","App","token","getHashParams","access_token","state","loggedIn","accessToken","topArtists","image","id","link","events","date","venue","city","country","e","hashParams","r","q","window","location","hash","substring","exec","decodeURIComponent","$","url","type","headers","success","json","i","console","log","Object","keys","items","length","setArtistValues","data","setState","images","uri","external_urls","spotify","forEach","getConcertForArtist","artistName","async","dataType","hasOwnProperty","eventsArr","_embedded","setEventValues","event","venues","dates","start","localDate","countryCode","className","rel","href","scroller","_scroller","map","class","src","alt","onClick","getTopArtists","getConcerts","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration"],"mappings":"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","file":"static/js/main.3ffcfc44.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { findDOMNode } from \"react-dom\";\nimport scrollIntoView from \"scroll-into-view\";\nimport PropTypes from \"prop-types\";\n\nclass ScrollView extends Component {\n  static childContextTypes = {\n    scroll: PropTypes.object,\n  }\n  elements = {};\n  register = (name, ref) => {\n    this.elements[name] = ref;\n  }\n  unregister = (name) => {\n    delete this.elements[name];\n  }\n  getChildContext() {\n    return {\n      scroll: {\n        register: this.register,\n        unregister: this.unregister\n      }\n    }\n  }\n  scrollTo = (name) => {\n    const node = findDOMNode(this.elements[name]);\n    scrollIntoView(node, {\n      time: 500,\n      align: {\n        top: 0\n      }\n    })\n  }\n  render() {\n    return (\n      React.Children.only(this.props.children)\n    );\n  }\n}\n\nclass ScrollElement extends Component {\n  static contextTypes = {\n    scroll: PropTypes.object,\n  }\n  componentDidMount() {\n    this.context.scroll.register(this.props.name, this._element);\n  }\n  componentWillUnmount() {\n    this.context.scroll.unregister(this.props.name);\n  }\n  \n  render() {\n    return (\n      React.cloneElement(this.props.children, {\n        ref: ref => this._element = ref\n      })\n    );\n  }\n}\n\nexport {\n  ScrollElement\n}\n\nexport default ScrollView;","import React, {Component} from 'react';\nimport * as $ from 'jquery';\nimport ScrollView, { ScrollElement } from \"./scroller\";\nimport './App.css';\n\nclass App extends Component {\n  constructor(){\n    super();\n    const params = this.getHashParams();\n    const token = params.access_token;\n    this.state = {\n      loggedIn: token ? true : false,\n      accessToken: token,\n      topArtists: [{\n        name: \"James\",\n        image: \"https://static.scientificamerican.com/sciam/cache/file/32665E6F-8D90-4567-9769D59E11DB7F26_source.jpg?w=590&h=800&7E4B4CAD-CAE1-4726-93D6A160C2B068B2\",\n        id: null,\n        link: null\n      }],\n      events: [{\n        name: \"Carter\",\n        date: null,\n        venue: null,\n        city: null,\n        country: null,\n        image: \"https://www.petmd.com/sites/default/files/Acute-Dog-Diarrhea-47066074.jpg\",\n        link: null\n      }]\n    }\n  }\n\n  getHashParams() {\n    var hashParams = {};\n    var e, r = /([^&;=]+)=?([^&;]*)/g,\n        q = window.location.hash.substring(1);\n    e = r.exec(q)\n    while (e) {\n       hashParams[e[1]] = decodeURIComponent(e[2]);\n       e = r.exec(q);\n    }\n    return hashParams;\n  }\n\n  getTopArtists() {\n    $.ajax({\n      url: 'https://api.spotify.com/v1/me/top/artists',\n      type: \"GET\",\n      headers: {\n        'Authorization' : 'Bearer ' + this.state.accessToken\n      },\n      success: (json) => {\n        console.log(json);\n        let i;\n        this.state.topArtists = [];\n        for(i = 0; i < Object.keys(json.items).length; i++){\n          this.setArtistValues(json.items[i]);\n        }\n        console.log(this.state.topArtists);\n      }\n    });\n  }\n\n  setArtistValues(data) {\n    this.setState({\n      topArtists: [...this.state.topArtists, {name: data.name, \n        image: data.images[1].url, \n        id: data.uri.substring(15),\n        link: data.external_urls.spotify}]\n    });\n    console.log(data.external_urls.spotify);\n  }\n\n  getConcerts(){\n    this.state.events = [];\n    this.state.topArtists.forEach(e => {this.getConcertForArtist(e.name)});\n  }\n\n  getConcertForArtist(artistName){\n    $.ajax({\n      type:\"GET\",\n      url:\"https://app.ticketmaster.com/discovery/v2/events.json?keyword=\" + artistName + \"&apikey=RYGH6ywE2k7EdbSoj1Ipuq4EMDmzt804\",\n      async:true,\n      dataType: \"json\",\n      success: (json) => {\n        if (json.hasOwnProperty('_embedded')) {\n          let eventsArr = json._embedded.events;\n          let i;\n          for(i = 0; i < Object.keys(eventsArr).length; i++){\n            this.setEventValues(eventsArr[i]);\n          }\n        }\n      }\n    });\n  }\n\n  setEventValues(event){\n    let venue = event._embedded.venues[0];\n    this.setState({\n      events: [...this.state.events, {\n        name: event.name, \n        date: event.dates.start.localDate, \n        venue: venue.name,\n        city: venue.city.name,\n        country: venue.country.countryCode,\n        image: event.images[0].url,\n        link: event.url\n      }]\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"Header\">\n          <h1 className=\"Title\">Find Me A Concert</h1>\n        </div>\n\n        <link rel=\"stylesheet\" href=\"https://www.w3schools.com/w3css/4/w3.css\"></link>\n\n        <div className=\"column\">\n          <div className=\"columnHeader\">\n            <h2 className=\"fav\">Your Favorite Artists</h2>\n          </div>\n        <ScrollView ref={scroller => this._scroller = scroller}>\n          <div className=\"artistScroller\">\n            {this.state.topArtists.map(({ name, image }) => {\n              return (\n                <ScrollElement name={name}>\n                  <div className=\"item\">\n                    <div class=\"w3-card-2 w3-hover-shadow\">\n                      <img src={image} alt={name}/>\n                      <div class=\"w3-container w3-center\">\n                        <p>{name}</p>\n                      </div>\n                    </div>\n                  </div>\n                </ScrollElement>\n              );\n            })}\n          </div>\n        </ScrollView>\n        </div>\n\n        <div className=\"column\">\n\n          <div className=\"favArtist\">\n            Favorite Artist: {this.state.topArtists[0].name}\n          </div>\n\n          { !this.state.loggedIn && <a href='http://localhost:8888'>\n            <button className=\"buttons\">\n              Login To Spotify\n            </button>\n          </a>\n          }\n\n          { this.state.loggedIn &&\n          <button className=\"buttons\" onClick={() => this.getTopArtists()}>\n            Check Favorite Artist\n          </button>\n          }\n\n          { this.state.loggedIn && \n          <button className=\"buttons\" onClick={() => this.getConcerts()}>\n            Get Concerts\n          </button>\n          }\n          {\n            this.state.loggedIn && <h2 className=\"LoggedIn\"> Logged In </h2>\n          }\n        </div>\n\n        <div className=\"column\">\n          <div className=\"columnHeader\">\n            <h2 className=\"fav\">Their Events Near You</h2>\n          </div>\n        <ScrollView ref={scroller => this._scroller = scroller}>\n          <div className=\"eventScroller\">\n            {this.state.events.map(({ name, date, city, country, image }) => {\n              return (\n                <ScrollElement name={name}>\n                  <div className=\"item\">\n                    <div class=\"w3-card-2 w3-hover-shadow\">\n                      <img src={image} alt={name}/>\n                      <div class=\"w3-container w3-center\">\n                        <h3>{name}</h3>\n                        <p>{city}, {country}</p>\n                        <p>{date}</p>\n                      </div>\n                    </div>\n                  </div>\n                </ScrollElement>\n              );\n            })}\n          </div>\n        </ScrollView>\n        </div>\n\n\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}